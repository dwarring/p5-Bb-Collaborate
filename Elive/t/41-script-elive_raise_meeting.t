#!perl
use strict;
use warnings;
use File::Spec;
use Test::More;
use Test::Exception;
use English qw(-no_match_vars);

use lib '.';
use t::Elive;

use Elive;
use Elive::Entity::Meeting;

if ( not $ENV{TEST_AUTHOR} ) {
    my $msg = 'Author test.  Set $ENV{TEST_AUTHOR} to a true value to run.';
    plan( skip_all => $msg );
}

eval "use Test::Script::Run";

if ( $EVAL_ERROR ) {
    my $msg = 'Test::Script::Run required to run scripts';
    plan( skip_all => $msg );
}

unless (${Test::Script::Run::VERSION} >= '0.04') {
    my $msg = "Test::Script::Run version (${Test::Script::Run::VERSION} < 0.04)";
    plan( skip_all => $msg );
} 

plan(tests => 11);

local ($ENV{TERM}) = 'dumb';

my $script_name = 'elive_raise_meeting';

#
# try running script with --help
#

do {
    my ( $result, $stdout, $stderr ) = run_script($script_name, ['--help'] );
    ok($stderr eq '', "$script_name --help: stderr empty");
    ok($stdout =~ m{usage:}ix, "$script_name --help: stdout =~ 'usage:...''");
};
#
# try with invalid option
#

do {
    my ( $result, $stdout, $stderr ) = run_script($script_name, ['--invalid-opt']);

    ok($stderr =~ m{unknown \s+ option}ix, "$script_name invalid option message");
    ok($stdout =~ m{usage:}ix, "$script_name invalid option usage");

};

SKIP: {

    my %result = t::Elive->test_connection(only => 'real');
    my $auth = $result{auth};

    skip ($result{reason} || 'skipping live tests',
	7)
	unless $auth && @$auth && $auth->[0] && $auth->[1] && $auth->[2];

    my $meeting_name = 'test meeting, generated by t/41-script-elive_raise_meeting.t';

    my @meeting_args = (
	$auth->[0],
	-user => $auth->[1], -pass => $auth->[2],
	-name => $meeting_name,
	);

    #
    # start with a simple meeting
    #
    diag("raising meeting: $meeting_name");
    
    my ( $result, $stdout, $stderr ) = run_script($script_name, \@meeting_args );
	diag("stderr:$stderr");
	diag("stdout:$stdout");

    ok($stderr eq '', "raise simple meeting: stderr empty");

    my $meeting_response_re = qr{^created meeting: (.*?) with id (\d+)$}im;

    my ($ret_meeting_name, $ret_meeting_id) = ($stdout =~ $meeting_response_re);

    ok($ret_meeting_name, "raise simple meeting: meeting name returned");
    ok($ret_meeting_id, "raise simple meeting: meeting id returned");

    unless ($ret_meeting_name && $ret_meeting_id) {
	diag "unable to raise simple meeting - aborting";
	exit (1);
    }

    ok($ret_meeting_name eq $meeting_name, 'raise simple meeting: echoed meeting name as expected');

    my $connection_class = $result{class};
    my $connection = $connection_class->connect(@$auth)
	or die "failed to connect?";

    my $meeting;
    ok($meeting = Elive::Entity::Meeting->retrieve([$ret_meeting_id], connection => $connection), 'raise simple meeting: retrieve');

    unless ($meeting) {
	diag "unable to retrieve meeting: $ret_meeting_id - aborting";
	exit (1);
    }

    ok($meeting->name eq $meeting_name, 'raise simple meeting: retrieved meeting name as expected');

    lives_ok(sub {$meeting->delete}, 'raise simple meeting: deletion - lives');

    #
    # TO DO - test options and arguments
    #
}
