#!perl
use warnings; use strict;
use Test::More tests => 21;
use Test::Exception;
use Test::Builder;
use version;

use lib '.';
use t::Elive;

use Elive::Entity::Session;

our $t = Test::Builder->new;
our $class = 'Elive::Entity::Session';

use Carp;
$SIG{__DIE__} = \&Carp::confess;

our $connection;

SKIP: {

    my $skippable = 21;

    eval 'require DateTime';
    skip('DateTime is required to run this test', $skippable)
	if $@;

    my %result = t::Elive->test_connection();
    my $auth = $result{auth};

   skip ($result{reason} || 'skipping live tests', $skippable)
	unless $auth && @$auth;

    my $connection_class = $result{class};
    $connection = $connection_class->connect(@$auth);
    Elive->connection($connection);

    my $dt = DateTime->now->truncate(to => 'minute');

    do {
	#
	# generate a date that's on the quarter hour and slightly into
	# the future (to allow for connection latency).
	#
	$dt->add(minutes => 1);
    } until ($dt->minute % 15 == 0 && $dt->epoch > time() + 60);

    my $session_start = $dt->epoch;
    my $session_end = $session_start + 900;

    $session_start .= '000';
    $session_end .= '000';

    my %insert_data = (
	name => 'test session, generated by t/32-soap-session.t',
	facilitator => $connection->user,
	start =>  $session_start,
	end => $session_end,
	allModerators => 1,
	supervised => 0,
	allPermissions => 1,
    );

    my ($session) = $class->insert(\%insert_data);

    isa_ok($session, $class, 'session');
    ok(my $session_id = $session->sessionId, 'Insert returned session id');

    diag "session-id: $session_id";

    foreach (keys %insert_data) {
	#
	# returned record doesn't contain password
	is_deeply($session->$_, $insert_data{$_}, "session $_ as expected");
    }

    my %update_data = (
	moderatorNotes => 'test moderator notes. Here are some entities: & > <',
	userNotes => 'test user notes; some more entities: &gt;',
	raiseHandOnEnter => 1,
	maxTalkers => 3,
	recordingModeType => 2,
	);

    $session->update(\%update_data);

    $connection->disconnect;
}

