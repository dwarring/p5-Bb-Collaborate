#!perl
use warnings; use strict;
use Test::More tests => 3;
use Test::Exception;
use Test::Builder;

# early tests for Elive::View::Session::_ELM3 - under construction

use lib '.';
use t::Elive;

BEGIN {
    use Carp;
    $SIG{__DIE__} = \&Carp::confess;
};

use Elive;
use Elive::View::Session::_ELM3;

use XML::Simple;

our $t = Test::Builder->new;
our $class = 'Elive::View::Session' ;

our $connection;

SKIP: {

    my %result = t::Elive->test_connection();
    my $auth = $result{auth};

    my $connection_class = $result{class};
    skip ($result{reason} || 'skipping live tests', 3)
	if $connection_class->isa('t::Elive::MockConnection');

    $connection = $connection_class->connect(@$auth);
    Elive->connection($connection);

    my $session_start = time();
    my $session_end = $session_start + 900;

    $session_start .= '000';
    $session_end .= '000';

    my %session_data = (
	name => 'test session, generated by t/32-soap-session.t',
	facilitatorId => Elive->login->userId,
	password => 'test', # what else?
	start =>  $session_start,
	end => $session_end,
	privateMeeting => 1,
	costCenter => 'testing',
	moderatorNotes => 'test moderator notes. Here are some entities: & > <',
	userNotes => 'test user notes; some more entities: &gt;',
	recordingStatus => 'remote',
	raiseHandOnEnter => 1,
	maxTalkers => 3,
	inSessionInvitation => 1,
	boundaryMinutes => 15,
	fullPermissions => 1,
	supervised => 1,
	seats => 2,
##	restrictedMeeting => 1,
    );

    my ($session) = $class->insert(\%session_data);

    use Elive::View::Session::_ELM3;
    use Carp; $SIG{__DIE__} = \&Carp::confess;
    my $elm3_params = Elive::View::Session::_ELM3->_freeze( $session );
    use YAML; diag YAML::Dump($elm3_params);
    # just a couple of spot checks for now
    is($elm3_params->{start}, $session_start, 'frozen start');
    is($elm3_params->{boundaryTime}, 15, 'frozen boundaryTime');
    is($elm3_params->{reservedSeatCount}, 2, 'frozen seat count');

    $session->delete;
}

Elive->disconnect;

