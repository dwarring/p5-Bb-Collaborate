#!perl
use warnings; use strict;
use Test::More tests => 44;
use Test::Exception;
use Test::Builder;

# early tests for Elive::Entity::Session - under construction

use lib '.';
use t::Elive;

use Elive;
use Elive::Entity::Session;

use XML::Simple;

use Carp; $SIG{__DIE__} = \&Carp::confess;

our $t = Test::Builder->new;
our $class = 'Elive::Entity::Session' ;

our $connection;

lives_ok(sub {
    $class->_readback_check(
	{id => 12345, meeting => {name => 'as expected'}},
	[{id => 12345, meeting => {name => 'as expected'}}]
	)}, 'readback on valid data -lives');
#
# meeting password is not echoed in response
#
lives_ok(sub {
    $class->_readback_check(
	{id => 12345, meeting => {name => 'as expected', password=>'ssshhh!'}},
	[{id => 12345, meeting => {name => 'as expected', password => ''}}]
	)}, 'readback ignores blank password');

dies_ok(sub {
    $class->_readback_check(
	{id => 12345, meeting => {name => 'as expected'}},
	[{id => 12345, meeting => {name => 'whoops!'}}]
	)}, 'readback on invalid sub-record data - dies');

dies_ok(sub {
    $class->_readback_check(
	{id => 12345, meeting => {name => 'as expected'}},
	[{id => 99999, meeting => {name => 'as expected'}}]
	)}, 'readback on valid primary key - dies');

SKIP: {

    my %result = t::Elive->test_connection();
    my $auth = $result{auth};

    my $connection_class = $result{class};
    skip ($result{reason} || 'skipping live tests', 40)
	if $connection_class->isa('t::Elive::MockConnection');

    $connection = $connection_class->connect(@$auth);
    Elive->connection($connection);

    my $session_start = time();
    my $session_end = $session_start + 900;

    $session_start .= '000';
    $session_end .= '000';

    my %insert_data = (
	name => 'test session, generated by t/32-soap-session.t',
	facilitatorId => Elive->login->userId,
	password => 'test', # what else?
	start =>  $session_start,
	end => $session_end,
	privateMeeting => 1,
	costCenter => 'testing',
	moderatorNotes => 'test moderator notes. Here are some entities: & > <',
	userNotes => 'test user notes; some more entities: &gt;',
	recordingStatus => 'remote',
	raiseHandOnEnter => 1,
	maxTalkers => 3,
	inSessionInvitation => 1,
	boundaryMinutes => 15,
	fullPermissions => 1,
	supervised => 1,
	seats => 2,
	restrictedMeeting => 1,
    );

    my $elm3_params = $class->_freeze( \%insert_data );
    use YAML; diag YAML::Dump($elm3_params);
    # some spot checks on freezing
    is($elm3_params->{start}, $session_start, 'frozen "start"');
    is($elm3_params->{boundaryTime}, 15, 'frozen "boundaryMinutes"');
    is($elm3_params->{private}, 'true', 'frozen "privateMeeting"');
    is($elm3_params->{facilitator}, Elive->login->userId, 'frozen facilitator');
    is($elm3_params->{reservedSeatCount}, 2, 'frozen "seats"');
    is($elm3_params->{restrictParticipants}, 'true', 'frozen "restrictedMeeting"');
    my $session = $class->insert(\%insert_data);

    foreach (sort keys %insert_data) {
	next if $_ eq 'password'; # password is not echoed
	is( $session->$_, $insert_data{$_}, "insert: $_ saved");
    }

    my %update_data = (
	costCenter => 'testing again',
	boundaryMinutes => 30,
	);

    $session->update( \%update_data );

    my %all;
    @all{ keys %insert_data, keys %update_data } = undef;

    foreach (sort keys %all) {
	next if $_ eq 'password'; # password is not echoed

	my $expected_value = (exists $update_data{$_}
			      ? $update_data{$_}
			      : $insert_data{$_});

	is( $session->$_, $expected_value, "update: $_ saved");
    }

    $session->delete;
}

Elive->disconnect;

